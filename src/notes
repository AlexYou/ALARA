INPUT
-----
* handling of component density: number vs. mass, etc....

CHAIN
-----

* 'parent' of each root isotope must be set to NULL

* DONE * When tallying a chain, it will be necessary to figure out how many
	 nodes up the chain must be tallied.  While doing this, change the
	 state to FINISHED.


TODO:
------

* DONE * allow included input file segments: implemented as a FILO 
         stack of input file stream references

* separate out the ALARA v1 binary format dependent stuff from the
  ASCIILib class

* DONE * make sure that loopRank[n] is not lower than loopRank[m<n] : if so,
	 there is a loop in the middle.


* add the possibility to set the width of the output

* handling of void zones ????

* Since about 12% of the run-time is spend in Volume::fold(...), it
  might be a big time saver to cache the collapsed reaction rates.
  With 22000 nodes, fewer than 2000 isotopes in the library, and
  probably only about 200 in any given problem, Volume::fold(...) is
  being invoked, on average, between 10 and 100 times for each
  isotope.  A disk cache could be implemented as part of the ALARALib
  class, extending its LibIdx member class to include a second offset
  into the cache library.  Cache size estimate: 200 isotopes * 400
  intervals * 20 reactions * 4 bytes (floats) >~ 6 MB.  (Perhaps even
  use a RAM cache.)

* idea: allow multiple input blocks to be addative.  E.G. if user has
  two 'volumes' blocks, have the second block be appended to the
  existing list.  current behaviour is undefined, but probably results
  in a memory leak and a replaced list.

*********************** ROUND-OFF ERROR ********************
Note that bateman(...) and laplaceInverse(...) currently take the
absolute value of negative results, which is only valid when assuming
that they are inconsequential.  This is a source of numerical error!!!
but a positive wrong answer is better than a negative wrong answer.
