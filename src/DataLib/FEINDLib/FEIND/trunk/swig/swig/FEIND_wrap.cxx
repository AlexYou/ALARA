/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_FEIND__RamLib swig_types[0] 
#define  SWIGTYPE_p_std__vectorTstd__string_t swig_types[1] 
#define  SWIGTYPE_p_FEIND__LibDefine swig_types[2] 
static swig_type_info *swig_types[4];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _FEIND.so
  ------------------------------------------------*/
#define SWIG_init    init_FEIND

#define SWIG_name    "_FEIND"

#include "../FeindNs.h"
#include "../Consts.h"
#include "../LibDefine.h"
#include "../RamLib.h"
#include <string>
#include <vector>


#include <string>

PyObject* SwigInt_FromBool(bool b) {
    return PyInt_FromLong(b ? 1L : 0L);
}
double SwigNumber_Check(PyObject* o) {
    return PyFloat_Check(o) || PyInt_Check(o) || PyLong_Check(o);
}
double SwigNumber_AsDouble(PyObject* o) {
    return PyFloat_Check(o) ? PyFloat_AsDouble(o) 
        : (PyInt_Check(o) ?   double(PyInt_AsLong(o))
                            : double(PyLong_AsLong(o)));
}
PyObject* SwigString_FromString(const std::string& s) {
    return PyString_FromStringAndSize(s.data(),s.size());
}
std::string SwigString_AsString(PyObject* o) {
    return std::string(PyString_AsString(o));
}


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>

std::string std_vectorlstd_string_g_pop___(std::vector<std::string > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::string x = self->back();
                self->pop_back();
                return x;
            }
std::string std_vectorlstd_string_g___getitem_____(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<std::string > std_vectorlstd_string_g___getslice_____(std::vector<std::string > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<std::string > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlstd_string_g___setitem_____(std::vector<std::string > *self,int i,std::string x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_string_g___setslice_____(std::vector<std::string > *self,int i,int j,std::vector<std::string > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= int(self->size()))
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorlstd_string_g___delitem_____(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_string_g___delslice_____(std::vector<std::string > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
extern FEIND::RamLib FEIND::Library;
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_StringVector__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_StringVector",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringVector__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    std::string *arg2 = 0 ;
    std::vector<std::string > *result;
    std::string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_StringVector",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1),
            PyString_Size(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringVector__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = 0 ;
    std::vector<std::string > *result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_StringVector",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                } else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string" "> expected");
                    SWIG_fail;
                }
            }
        } else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        } else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<std::string > *)new std::vector<std::string >((std::vector<std::string > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_StringVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_StringVector__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_StringVector__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                } else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (PyString_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                    Py_DECREF(o);
                }
            } else {
                /* wrapped vector? */
                std::vector<std::string >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTstd__string_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_StringVector__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_StringVector__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_StringVector'");
    return NULL;
}


static PyObject *_wrap_StringVector___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    unsigned int result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                } else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string" "> expected");
                    SWIG_fail;
                }
            }
        } else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        } else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<std::string > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    bool result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                } else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string" "> expected");
                    SWIG_fail;
                }
            }
        } else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        } else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<std::string > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:StringVector_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1))
        arg2 = std::string(PyString_AsString(obj1),
        PyString_Size(obj1));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StringVector_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlstd_string_g_pop___(arg1);
            
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:StringVector___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlstd_string_g___getitem_____(arg1,arg2);
            
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        resultobj = PyString_FromStringAndSize((&result)->data(),(&result)->size());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<std::string > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:StringVector___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlstd_string_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    std::string arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:StringVector___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj2))
        arg3 = std::string(PyString_AsString(obj2),
        PyString_Size(obj2));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            std_vectorlstd_string_g___setitem_____(arg1,arg2,arg3);
            
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<std::string > *arg4 = 0 ;
    std::vector<std::string > temp4 ;
    std::vector<std::string > *v4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:StringVector___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<std::string >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (PyString_Check(o)) {
                    temp4[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                } else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string" "> expected");
                    SWIG_fail;
                }
            }
        } else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg4 = v4;
        } else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlstd_string_g___setslice_____(arg1,arg2,arg3,(std::vector<std::string > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:StringVector___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlstd_string_g___delitem_____(arg1,arg2);
            
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StringVector___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:StringVector___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlstd_string_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_StringVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_StringVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StringVector_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTstd__string_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_NUM_ELEMENTS_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable NUM_ELEMENTS is read-only.");
    return 1;
}


static PyObject *_wrap_NUM_ELEMENTS_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::NUM_ELEMENTS);
    return pyobj;
}


static int _wrap_PROTON_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable PROTON is read-only.");
    return 1;
}


static PyObject *_wrap_PROTON_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::PROTON);
    return pyobj;
}


static int _wrap_NEUTRON_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable NEUTRON is read-only.");
    return 1;
}


static PyObject *_wrap_NEUTRON_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::NEUTRON);
    return pyobj;
}


static int _wrap_DEUTERON_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable DEUTERON is read-only.");
    return 1;
}


static PyObject *_wrap_DEUTERON_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::DEUTERON);
    return pyobj;
}


static int _wrap_TRITON_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable TRITON is read-only.");
    return 1;
}


static PyObject *_wrap_TRITON_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::TRITON);
    return pyobj;
}


static int _wrap_HELIUM3_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable HELIUM3 is read-only.");
    return 1;
}


static PyObject *_wrap_HELIUM3_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::HELIUM3);
    return pyobj;
}


static int _wrap_HELIUM4_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable HELIUM4 is read-only.");
    return 1;
}


static PyObject *_wrap_HELIUM4_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::HELIUM4);
    return pyobj;
}


static int _wrap_ALPHA_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable ALPHA is read-only.");
    return 1;
}


static PyObject *_wrap_ALPHA_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::ALPHA);
    return pyobj;
}


static int _wrap_GAMMA_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable GAMMA is read-only.");
    return 1;
}


static PyObject *_wrap_GAMMA_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::GAMMA);
    return pyobj;
}


static int _wrap_BETA_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable BETA is read-only.");
    return 1;
}


static PyObject *_wrap_BETA_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::BETA);
    return pyobj;
}


static int _wrap_ELECTRON_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable ELECTRON is read-only.");
    return 1;
}


static PyObject *_wrap_ELECTRON_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::ELECTRON);
    return pyobj;
}


static int _wrap_XRAY_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable XRAY is read-only.");
    return 1;
}


static PyObject *_wrap_XRAY_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::XRAY);
    return pyobj;
}


static int _wrap_SF_FRAGMENTS_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable SF_FRAGMENTS is read-only.");
    return 1;
}


static PyObject *_wrap_SF_FRAGMENTS_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::SF_FRAGMENTS);
    return pyobj;
}


static int _wrap_POSITRON_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable POSITRON is read-only.");
    return 1;
}


static PyObject *_wrap_POSITRON_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::POSITRON);
    return pyobj;
}


static int _wrap_FISSION_DAUGHTER_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable FISSION_DAUGHTER is read-only.");
    return 1;
}


static PyObject *_wrap_FISSION_DAUGHTER_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)FEIND::FISSION_DAUGHTER);
    return pyobj;
}


static PyObject *_wrap_LibDefine_Args_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::LibDefine *arg1 = (FEIND::LibDefine *) 0 ;
    std::vector<std::string > *arg2 = (std::vector<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LibDefine_Args_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__LibDefine,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->Args = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LibDefine_Args_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::LibDefine *arg1 = (FEIND::LibDefine *) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LibDefine_Args_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__LibDefine,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<std::string > *)& ((arg1)->Args);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LibDefine_Format_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::LibDefine *arg1 = (FEIND::LibDefine *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:LibDefine_Format_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__LibDefine,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->Format = (FEIND::FEINDFormat )arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LibDefine_Format_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::LibDefine *arg1 = (FEIND::LibDefine *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LibDefine_Format_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__LibDefine,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->Format);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LibDefine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::LibDefine *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_LibDefine")) goto fail;
    result = (FEIND::LibDefine *)new FEIND::LibDefine();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FEIND__LibDefine, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_LibDefine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::LibDefine *arg1 = (FEIND::LibDefine *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LibDefine",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__LibDefine,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LibDefine_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_FEIND__LibDefine, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_LoadLibrary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::LibDefine *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LoadLibrary",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__LibDefine,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    FEIND::LoadLibrary((FEIND::LibDefine const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RamLib_GetTotalDecayEnergy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::RamLib *arg1 = (FEIND::RamLib *) 0 ;
    FEIND::Kza arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:RamLib_GetTotalDecayEnergy",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__RamLib,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->GetTotalDecayEnergy(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RamLib(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::RamLib *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RamLib")) goto fail;
    result = (FEIND::RamLib *)new FEIND::RamLib();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FEIND__RamLib, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RamLib(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FEIND::RamLib *arg1 = (FEIND::RamLib *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RamLib",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FEIND__RamLib,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RamLib_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_FEIND__RamLib, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Library_set(PyObject *_val) {
    {
        FEIND::RamLib * temp;
        if ((SWIG_ConvertPtr(_val, (void **) &temp, SWIGTYPE_p_FEIND__RamLib, SWIG_POINTER_EXCEPTION)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'FEIND::Library (FEIND::RamLib)'");
            return 1;
        }
        FEIND::Library = *((FEIND::RamLib *) temp);
    }
    return 0;
}


static PyObject *_wrap_Library_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &FEIND::Library, SWIGTYPE_p_FEIND__RamLib, 0);
    return pyobj;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"new_StringVector", _wrap_new_StringVector, METH_VARARGS },
	 { (char *)"StringVector___len__", _wrap_StringVector___len__, METH_VARARGS },
	 { (char *)"StringVector___nonzero__", _wrap_StringVector___nonzero__, METH_VARARGS },
	 { (char *)"StringVector_clear", _wrap_StringVector_clear, METH_VARARGS },
	 { (char *)"StringVector_append", _wrap_StringVector_append, METH_VARARGS },
	 { (char *)"StringVector_pop", _wrap_StringVector_pop, METH_VARARGS },
	 { (char *)"StringVector___getitem__", _wrap_StringVector___getitem__, METH_VARARGS },
	 { (char *)"StringVector___getslice__", _wrap_StringVector___getslice__, METH_VARARGS },
	 { (char *)"StringVector___setitem__", _wrap_StringVector___setitem__, METH_VARARGS },
	 { (char *)"StringVector___setslice__", _wrap_StringVector___setslice__, METH_VARARGS },
	 { (char *)"StringVector___delitem__", _wrap_StringVector___delitem__, METH_VARARGS },
	 { (char *)"StringVector___delslice__", _wrap_StringVector___delslice__, METH_VARARGS },
	 { (char *)"delete_StringVector", _wrap_delete_StringVector, METH_VARARGS },
	 { (char *)"StringVector_swigregister", StringVector_swigregister, METH_VARARGS },
	 { (char *)"LibDefine_Args_set", _wrap_LibDefine_Args_set, METH_VARARGS },
	 { (char *)"LibDefine_Args_get", _wrap_LibDefine_Args_get, METH_VARARGS },
	 { (char *)"LibDefine_Format_set", _wrap_LibDefine_Format_set, METH_VARARGS },
	 { (char *)"LibDefine_Format_get", _wrap_LibDefine_Format_get, METH_VARARGS },
	 { (char *)"new_LibDefine", _wrap_new_LibDefine, METH_VARARGS },
	 { (char *)"delete_LibDefine", _wrap_delete_LibDefine, METH_VARARGS },
	 { (char *)"LibDefine_swigregister", LibDefine_swigregister, METH_VARARGS },
	 { (char *)"LoadLibrary", _wrap_LoadLibrary, METH_VARARGS },
	 { (char *)"RamLib_GetTotalDecayEnergy", _wrap_RamLib_GetTotalDecayEnergy, METH_VARARGS },
	 { (char *)"new_RamLib", _wrap_new_RamLib, METH_VARARGS },
	 { (char *)"delete_RamLib", _wrap_delete_RamLib, METH_VARARGS },
	 { (char *)"RamLib_swigregister", RamLib_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_FEIND__RamLib[] = {{"_p_FEIND__RamLib", 0, "FEIND::RamLib *", 0},{"_p_FEIND__RamLib"},{0}};
static swig_type_info _swigt__p_std__vectorTstd__string_t[] = {{"_p_std__vectorTstd__string_t", 0, "std::vector<std::string > *", 0},{"_p_std__vectorTstd__string_t"},{0}};
static swig_type_info _swigt__p_FEIND__LibDefine[] = {{"_p_FEIND__LibDefine", 0, "FEIND::LibDefine *", 0},{"_p_FEIND__LibDefine"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_FEIND__RamLib, 
_swigt__p_std__vectorTstd__string_t, 
_swigt__p_FEIND__LibDefine, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"VITAMIN_J", (long) FEIND::VITAMIN_J, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"IEAF", (long) FEIND::IEAF, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"CINDER_NEUTRON", (long) FEIND::CINDER_NEUTRON, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"CINDER_GAMMA", (long) FEIND::CINDER_GAMMA, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"DECAY_ENDF_6", (long) FEIND::DECAY_ENDF_6, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"EAF_4_1", (long) FEIND::EAF_4_1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"CINDER", (long) FEIND::CINDER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ENDF_IEAF", (long) FEIND::ENDF_IEAF, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FEIND_UNKNOWN_ERROR", (long) FEIND::FEIND_UNKNOWN_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FEIND_FORMAT_ERROR", (long) FEIND::FEIND_FORMAT_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FEIND_DECAYMODE_ERROR", (long) FEIND::FEIND_DECAYMODE_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FEIND_FILEOPEN_ERROR", (long) FEIND::FEIND_FILEOPEN_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FEIND_INVALIDOPTION_ERROR", (long) FEIND::FEIND_INVALIDOPTION_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FEIND_XSECSIZE_ERROR", (long) FEIND::FEIND_XSECSIZE_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FEIND_EMPTYXSEC_ERROR", (long) FEIND::FEIND_EMPTYXSEC_ERROR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"HEAVY_PARTICLES", (long) FEIND::HEAVY_PARTICLES, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LIGHT_PARTICLES", (long) FEIND::LIGHT_PARTICLES, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"EM_RADIATION", (long) FEIND::EM_RADIATION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"UNKNOWN", (long) FEIND::UNKNOWN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"GAMMA_DECAY", (long) FEIND::GAMMA_DECAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"BETA_DECAY", (long) FEIND::BETA_DECAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ELECTRON_CAPTURE", (long) FEIND::ELECTRON_CAPTURE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ISOMERIC_TRANSITION", (long) FEIND::ISOMERIC_TRANSITION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ALPHA_DECAY", (long) FEIND::ALPHA_DECAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"NEUTRON_EMISSION", (long) FEIND::NEUTRON_EMISSION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"SPONTANEOUS_FISSION", (long) FEIND::SPONTANEOUS_FISSION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"PROTON_EMISSION", (long) FEIND::PROTON_EMISSION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"BETA_NEUTRON_EMIT", (long) FEIND::BETA_NEUTRON_EMIT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"BETA_ALPHA_EMIT", (long) FEIND::BETA_ALPHA_EMIT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"POSITRON_ALPHA_EMIT", (long) FEIND::POSITRON_ALPHA_EMIT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"POSITRON_PROTON_EMIT", (long) FEIND::POSITRON_PROTON_EMIT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"IT_ALPHA_EMIT", (long) FEIND::IT_ALPHA_EMIT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"NO_FISSION", (long) FEIND::NO_FISSION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FISSION_FAST", (long) FEIND::FISSION_FAST, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FISSION_THERMAL", (long) FEIND::FISSION_THERMAL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FISSION_HOT", (long) FEIND::FISSION_HOT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"FISSION_SF", (long) FEIND::FISSION_SF, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TOTAL_CS", (long) FEIND::TOTAL_CS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"NEUTRON_FISSION_CS", (long) FEIND::NEUTRON_FISSION_CS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"CHARGED_CS", (long) FEIND::CHARGED_CS, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"NUM_ELEMENTS",_wrap_NUM_ELEMENTS_get, _wrap_NUM_ELEMENTS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"PROTON",_wrap_PROTON_get, _wrap_PROTON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"NEUTRON",_wrap_NEUTRON_get, _wrap_NEUTRON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DEUTERON",_wrap_DEUTERON_get, _wrap_DEUTERON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"TRITON",_wrap_TRITON_get, _wrap_TRITON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"HELIUM3",_wrap_HELIUM3_get, _wrap_HELIUM3_set);
    SWIG_addvarlink(SWIG_globals,(char*)"HELIUM4",_wrap_HELIUM4_get, _wrap_HELIUM4_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ALPHA",_wrap_ALPHA_get, _wrap_ALPHA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"GAMMA",_wrap_GAMMA_get, _wrap_GAMMA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"BETA",_wrap_BETA_get, _wrap_BETA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ELECTRON",_wrap_ELECTRON_get, _wrap_ELECTRON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"XRAY",_wrap_XRAY_get, _wrap_XRAY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"SF_FRAGMENTS",_wrap_SF_FRAGMENTS_get, _wrap_SF_FRAGMENTS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"POSITRON",_wrap_POSITRON_get, _wrap_POSITRON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"FISSION_DAUGHTER",_wrap_FISSION_DAUGHTER_get, _wrap_FISSION_DAUGHTER_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Library",_wrap_Library_get, _wrap_Library_set);
}

