      program crflux
c $Id: rtflux2alara.f,v 1.1 2000-03-01 20:37:15 wilson Exp $
c
c*********************************************************************
c
c  this program reads the scalar flux from the onedant or twodent 
c  neutronics program and converts it into a dkr flux format 
c  readable by the DKR-PULSAR radioactivity code.
c
c  IMPORTANT:  This code is set up to read a 67 (46 neutron and
c  21 gamma) group library.  If any other group structure is used,
c  this auxiliary code must be modified.
c
c
c                          rtflux
c                            |
c                            |
c                      ______V______
c                     |             |
c                     |   crflux    | -----> outsclr
c                     |_____________|
c                            |
c                            |
c                            V
c                         fluxin
c
c
c  rtflux: the binary flux file generated by ONEDANT or TWODANT
c          according to the Standard Interface Files and Procedures
c          for Reactor Physics Codes document, the 2D read is also
c          applicable for 3D.  Just need to adjust the size of the
c          flux arrays below.  Consult the Standard Interface File
c          for more information       
c
c  outsclr: output file which prints the mesh and group contained
c           on the rtflux file and prints the first five scalar flux
c           groups read from the rtflux file.  This file is used as
c           a check.
c
c  fluxin: a text file containing the scalar flux values converted
c          to the formatted readable by the DKR_PULSAR code.  This 
c          file is required by the DKR-PULSAR code to generate 
c          reaction rates.
c
c  dimension limits:
c          ngroup = 67: 46 neutron groups and 21 gamma groups
c          nintl = 100: x geometric mesh size
c          ntotal = nintl*nintl: total length of 2d geometric mesh size
c
c*********************************************************************
c
      parameter (ngroup = 300, nintl = 1000, ntotal = nintl*nintl)
c
c  for 2-D flux file
c      double precision freg(nintl, nintl), flux(ntotal, ngroup)
c
c  for 1_D flux file
       double precision  freg(nintl, ngroup), flux(nintl, ngroup)
c
      character hname*6, huse(2)*6, aint*3
c
c  assigning input and output units
c
      open(unit=2,file='rtflux',status='old',form='unformatted')
      open(unit=6,file='outsclr',status='unknown',form='formatted')
      open(unit=3,file='fluxin',status='unknown',form='formatted')
c
c  read file identification card
c
      read(2) hname, (huse(2), i=1,2), iver
      write(6,100) hname, (huse(i), i=1,2), iver
c
c  read specifications
c
      read(2)    ndim, ngrp, ninti, nintj, nintk, iter, effk,
     *             power, nblok
      write(6,105) ndim, ngrp, ninti, nintj, nintk, iter, effk,
     *             power, nblok 
c
c  there are 67 groups, 46 neutron and 21 gamma.  we are only
c  interested in the 46 neutron groups.  therefore set ngrp=46.
c
      if (ngrp .ne. 217) then
           write(6, *) 'This code is for 175 neutron and 42 gamma',
     >                 ' group structure flux file only'
           goto 999
      else
           ngrp = ngrp - 42 
      endif
c
c     
      if ((ndim .ne. 1) .and. (ndim .ne. 2)) then
           write(6, *) 'This code is for 1-D or 2-D flux file only'
           goto 999
      else
      endif
c
c
      if (ndim .eq. 1) then
c
c          processing 1-D flux file ......
c
           do 10 m=1,nblok
               jl = (m-1) * ((ngrp-1) / nblok + 1) + 1
               jup = m * ((ngrp-1) / nblok + 1)
               ju = min( ngrp , jup )
               read(2) ((freg(i,j),i=1,ninti),j=jl,ju)
   10      continue
c
c          print flux for the first five groups
c
           do 15 j=1,5
               write(6,110) j
               write(6,115) (freg(i,j),i=1,ninti)
   15      continue
c
           aint = 'int'
c
c          write flux value for each interval 
c
           do 30 ii=1,ninti
c              write(3,120) aint, ii
               write(3,120)
               write(3,125) (freg(ii,ll), ll=1,ngrp)
   30      continue
c
c
      else
c
c          processing 2-D flux file ......
c
           do 40 l=1,ngrp
                nint = 0
                do 36 k=1,nintk
                do 36 m=1,nblok
                     jl = (m-1) * ((nintj-1) / nblok + 1) + 1
                     jup = m * ((nintj-1) / nblok + 1)
                     ju = min( nintj , jup )
                     read(2) ((freg(i,j),i=1,ninti),j=jl,ju)
c
                     do 35 jj=jl,ju
                     do 35 ii=1,ninti
                          nint = nint + 1
                          flux(nint,l) = freg(ii,jj)
   35                continue
   36           continue
c
                if( nint .ne. ninti*nintj*nintk) then
                 write(6,*) 'nint =',nint,'  ','Error Reading 2-D Flux'
                 stop 123
                endif
c
   40      continue
c
c          print flux for the first five groups as a check
c
           do 45 j=1, 5
                write(6,110) j
                write(6,115) (flux(i,j),i=1,nint)
   45      continue
c
           aint = 'int'
c
c          write flux value for each interval 
c
           do 50 ii=1,nint
c               write(3,120) aint, ii
		write(3,120)
                write(3,125) (flux(ii, ll),ll=1,ngrp)
   50      continue
c
c 
      endif
c
c
  100 format(' ',5x,3(a6,2x),i6)
  105 format(5x,'ndim  = ',i6,/,
     1       5x,'ngrp  = ',i6,/,
     1       5x,'ninti = ',i6,/,
     1       5x,'nintj = ',i6,/,
     1       5x,'nintk = ',i6,/,
     1       5x,'iter  = ',i6,/,
     1       5x,'effk  = ',e9.3,/,
     1       5x,'power = ',e9.3,/,
     1       5x,'nblok = ',i6)
  110 format(5x,'group = ',i2)
  115 format(6(2x,1pe10.4))
  120 format(a3,i6)
  125 format(6(1pe12.5))
c
  999 continue
      close( unit=nin, status='keep' )
c
      stop
      end

